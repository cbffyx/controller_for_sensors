#include "SHT2x.h"
#include "ms5637.h"
#include <stdio.h>
#include "CACP04.h"

#define CACP04_ADDR 0x28 //0b0101000

#define CACP04_OPCode_Read_NVRAM						0x2000
#define CACP04_OPCode_Write_NVRAM						0xA000
#define CACP04_OPCode_Read_Configuration		0x23C0
#define CACP04_OPCode_Write_Configuration		0xA3C0
#define CACP04_OPCode_Read_Result						0x40
#define CACP04_OPCode_Power_on_Reset				0x88
#define CACP04_OPCode_Initialize						0x8A
#define CACP04_OPCode_CDC_Start_Conversion	0x8C
#define CACP04_OPCode_Test_read							0x7E11




/**
 * \brief Configures the SERCOM I2C master to be used with the MS5637 device.
 */
void CACP04_init(void)
{
    /* Initialize and enable device with config. */
    i2c_master_init();
}

/**
 * \brief Check whether MS5637 device is connected
 *
 * \return bool : status of MS5637
 *       - true : Device is present
 *       - false : Device is not acknowledging I2C address
  */
bool CACP04_is_connected(void)
{
    enum status_code i2c_status;

    struct i2c_master_packet transfer = {
        .address     = CACP04_ADDR,
        .data_length = 0,
        .data        = NULL,
    };
    /* Do the transfer */
    i2c_status = i2c_master_write_packet_wait(&transfer);
    if( i2c_status != STATUS_OK)
        return false;

    return true;
}

/**
 * \brief Writes the CACP04 8-bits command with the value passed
 *
 * \param[in] uint8_t : Command value to be written.
 *
 * \return CACP04_status : status of CACP04
 *       - CACP04_status_ok : I2C transfer completed successfully
 *       - CACP04_status_i2c_transfer_error : Problem with i2c transfer
 *       - CACP04_status_no_i2c_acknowledge : I2C did not acknowledge
 */
enum CACP04_status CACP04_write_command( uint8_t cmd)
{
    enum status_code i2c_status;
    uint8_t data[1];

    data[0] = cmd;

    struct i2c_master_packet transfer = {
        .address     = CACP04_ADDR,
        .data_length = 1,
        .data        = data,
    };
    /* Do the transfer */
    i2c_status = i2c_master_write_packet_wait(&transfer);
    if( i2c_status == STATUS_ERR_OVERFLOW )
        return CACP04_status_no_i2c_acknowledge;
    if( i2c_status != STATUS_OK)
        return CACP04_status_i2c_transfer_error;

    return CACP04_status_ok;
}

/**
 * \brief Reads the CACP04 EEPROM coefficient stored at address provided.
 *
 * \param[in] uint8_t : Address of coefficient in EEPROM
 * \param[out] uint16_t* : Value read in EEPROM
 *
 * \return CACP04_status : status of CACP04
 *       - CACP04_status_ok : I2C transfer completed successfully
 *       - CACP04_status_i2c_transfer_error : Problem with i2c transfer
 *       - CACP04_status_no_i2c_acknowledge : I2C did not acknowledge
 *       - CACP04_status_crc_error : CRC check error on the coefficients
 */
enum CACP04_status CACP04_read_eeprom_coeff(uint8_t command, uint16_t *coeff)
{
    enum CACP04_status status;
    enum status_code i2c_status;
    uint8_t buffer[2];

    buffer[0] = 0;
    buffer[1] = 0;

    /* Read data */
    struct i2c_master_packet read_transfer = {
        .address     = CACP04_ADDR,
        .data_length = 2,
        .data        = buffer,
    };

    // Send the conversion command
    status = CACP04_write_command(command);
    if(status != CACP04_status_ok)
        return status;

    i2c_status = i2c_master_read_packet_wait(&read_transfer);
    if( i2c_status == STATUS_ERR_OVERFLOW )
        return CACP04_status_no_i2c_acknowledge;
    if( i2c_status != STATUS_OK)
        return CACP04_status_i2c_transfer_error;

    *coeff = (buffer[0] << 8) | buffer[1];

    if (*coeff == 0)
        return CACP04_status_i2c_transfer_error;

    return CACP04_status_ok;
}


/*
enum status_code i2c_master_write_packet_wait(struct i2c_master_packet *packet)
{
	 uint8_t ack;
    IIC_Start();
    IIC_Send_Byte(((packet->address)<<1)&0xFE);
    ack = IIC_Wait_Ack();
	if(ack != 0)
	{
		return STATUS_ERR_OVERFLOW;
	}
    IIC_Send_Byte(packet->data[0]);
    ack = IIC_Wait_Ack();
    IIC_Stop();
    delay_ms(10);
	if(ack != 0)
	{
		return STATUS_ERR_OVERFLOW;
	}

	return STATUS_OK;
}
*/

enum status_code CACP04_Read_NVRAM(uint16_t addr,uint8_t *buf,uint16_t len)
{
    uint8_t ack;
    uint16_t address;
    uint16_t i;

    if (len==0)
    {
        return STATUS_OK;
    }
    IIC_Start();
    IIC_Send_Byte((CACP04_ADDR<<1)&0xFE);	//IIC_Address+W
    ack = IIC_Wait_Ack();
    if(ack != 0)
    {
        return STATUS_ERR_OVERFLOW;
    }
    address=CACP04_OPCode_Read_NVRAM|(addr&0x03ff);//po_code+address
    IIC_Send_Byte(address>>8);                   //send high
    ack = IIC_Wait_Ack();
    if(ack != 0)
    {
        return STATUS_ERR_OVERFLOW;
    }
    IIC_Send_Byte(address&0x00ff);               //send low
    ack = IIC_Wait_Ack();
    if(ack != 0)
    {
        return STATUS_ERR_OVERFLOW;
    }
    IIC_Send_Byte((CACP04_ADDR<<1)|0x01);        //IIC_Address+R
    ack = IIC_Wait_Ack();
    if(ack != 0)
    {
        return STATUS_ERR_OVERFLOW;
    }

        for (i=0; i<len; i++)
        {
            if (i==(len-1))
            {
                buf[i]=IIC_Read_Byte(0);
            }
            else
            {
                buf[i]=IIC_Read_Byte(1);
            }
        }
    IIC_Stop();
    delay_ms(10);
    return STATUS_OK;
}

enum status_code CACP04_Write_NVRAM(uint16_t addr,uint8_t *buf,uint16_t len)
{
    uint8_t ack;
    uint16_t address;
    uint16_t i;

    if (len==0)
    {
        return STATUS_OK;
    }
    IIC_Start();
    IIC_Send_Byte((CACP04_ADDR<<1)&0xFE);	//IIC_Address+W
    ack = IIC_Wait_Ack();
    if(ack != 0)
    {
        return STATUS_ERR_OVERFLOW;
    }
    address=CACP04_OPCode_Read_NVRAM|(addr&0x03ff);//po_code+address
    IIC_Send_Byte(address>>8);                   //send high
    ack = IIC_Wait_Ack();
    if(ack != 0)
    {
        return STATUS_ERR_OVERFLOW;
    }
    IIC_Send_Byte(address&0x00ff);               //send low
    ack = IIC_Wait_Ack();
    if(ack != 0)
    {
        return STATUS_ERR_OVERFLOW;
    }
    for (i=0; i<len; i++)
    {
        IIC_Send_Byte(buf[i]);               //send data
        ack = IIC_Wait_Ack();
        if(ack != 0)
        {
            return STATUS_ERR_OVERFLOW;
        }
    }
    IIC_Stop();
    delay_ms(10);
    return STATUS_OK;
}

enum status_code CACP04_Read_Configuration(uint8_t addr,uint8_t data)
{

}

enum status_code CACP04_Write_Configuration(uint8_t addr,uint8_t data)
{
}

enum status_code CACP04_Read_Result(uint8_t addr,uint8_t data)
{
}

/////////////////////////////////////////////////////////////Next Command

bool CACP04_Initialize()
{
}

bool CACP04_Power_on_Reset()
{
}

bool CACP04_CDC_Start_Conversion()
{
}

bool CACP04_Test_read()
{
}

bool CACP04_RDC_Start_Conversion()//Temperature
{
    //
}



